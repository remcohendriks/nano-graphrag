version: '3.8'

services:
  # FastAPI application
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      # API settings
      API_PREFIX: "/api/v1"
      ALLOWED_ORIGINS: "*"

      # Storage backends
      GRAPH_BACKEND: neo4j
      VECTOR_BACKEND: qdrant
      KV_BACKEND: redis

      # Neo4j configuration
      NEO4J_URL: neo4j://neo4j:7687
      NEO4J_USERNAME: ${NEO4J_USERNAME:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      NEO4J_DATABASE: ${NEO4J_DATABASE:-neo4j}

      # Qdrant configuration
      QDRANT_URL: http://qdrant:6333

      # Redis configuration
      REDIS_URL: redis://redis:6379

      # LLM settings (use environment variables)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LLM_PROVIDER: openai
      LLM_MODEL: gpt-5-mini
      EMBEDDING_PROVIDER: openai
      EMBEDDING_MODEL: text-embedding-3-small

      # Chunking settings optimized for gpt-5-mini (1M input tokens)
      CHUNKING_SIZE: 10000
      CHUNKING_OVERLAP: 500

      # Entity extraction settings
      ENTITY_MAX_GLEANING: 0

    depends_on:
      - neo4j
      - qdrant
      - redis
    networks:
      - graphrag-network
    volumes:
      - ./api_working_dir:/app/api_working_dir

  # Neo4j database
  neo4j:
    image: neo4j:5-enterprise
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - graphrag-network

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - graphrag-network

  # Redis cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - graphrag-network

  # RedisInsight for monitoring
  redisinsight:
    image: redis/redisinsight:latest
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/data
    networks:
      - graphrag-network

networks:
  graphrag-network:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
  qdrant_data:
  redis_data:
  redisinsight_data: