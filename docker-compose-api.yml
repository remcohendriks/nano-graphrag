version: '3.8'

services:
  # SPLADE Sparse Embedding Service
  splade:
    build:
      context: ./splade-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    networks:
      - graphrag-network
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # FastAPI application
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    volumes:
      - ./api_working_dir:/app/api_working_dir
      - neo4j_import:/neo4j_import
    environment:
      NEO4J_IMPORT_DIR: /neo4j_import
      # API settings
      API_PREFIX: "/api/v1"
      ALLOWED_ORIGINS: "*"

      # Storage backends
      GRAPH_BACKEND: neo4j
      VECTOR_BACKEND: qdrant
      KV_BACKEND: redis

      # Neo4j configuration
      NEO4J_URL: neo4j://neo4j:7687
      NEO4J_USERNAME: ${NEO4J_USERNAME:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      NEO4J_DATABASE: ${NEO4J_DATABASE:-neo4j}

      # Qdrant configuration
      QDRANT_URL: http://qdrant:6333

      # Redis configuration
      REDIS_URL: redis://redis:6379

      # LLM settings (use environment variables)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LLM_PROVIDER: openai
      LLM_MODEL: gpt-5-mini
      # LLM_MODEL: qwen3-30b-a3b-instruct-2507
      # LLM_BASE_URL: http://192.168.1.5:9090/v1
      # LLM_MAX_CONCURRENT: 2
      LLM_MAX_CONCURRENT: 8
      # LLM_MAX_TOKENS: 32000
      LLM_MAX_TOKENS: 256000
      LLM_REQUEST_TIMEOUT: 240.0 # llm can only do 1 request at a time, so set timeout high

      EMBEDDING_PROVIDER: openai
      EMBEDDING_MODEL: text-embedding-3-small
      EMBEDDING_DIMENSION: 1536
      # EMBEDDING_DIMENSION: 3072 - large model

      CHUNKING_SIZE: 32000
      CHUNKING_OVERLAP: 512
      # Chunking settings optimized for local model
      # CHUNKING_SIZE: 8192
      # CHUNKING_OVERLAP: 256

      # Entity extraction settings
      ENTITY_MAX_GLEANING: 0
      ENTITY_MAX_CONTINUATIONS: 3
      ENTITY_TYPES: "PERSON,ORGANIZATION,LOCATION,EVENT,CONCEPT,EXECUTIVE_ORDER,STATUTE,REGULATION,CASE,COURT"

      # Query settings
      QUERY_LOCAL_MAX_TOKEN_FOR_TEXT_UNIT: 32000

      # Hybrid search settings
      ENABLE_HYBRID_SEARCH: ${ENABLE_HYBRID_SEARCH:-true}
      SPARSE_SERVICE_URL: http://splade:8001
      SPARSE_TIMEOUT_SECONDS: ${SPARSE_TIMEOUT_SECONDS:-60}
      RRF_K: ${RRF_K:-60}
      SPARSE_TOP_K_MULTIPLIER: ${SPARSE_TOP_K_MULTIPLIER:-2.0}
      DENSE_TOP_K_MULTIPLIER: ${DENSE_TOP_K_MULTIPLIER:-1.0}

    depends_on:
      - neo4j
      - qdrant
      - redis
      - splade
    networks:
      - graphrag-network

  # Neo4j database
  neo4j:
    image: neo4j:5-enterprise
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
    networks:
      - graphrag-network

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - graphrag-network

  # Redis cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - graphrag-network

  # RedisInsight for monitoring
  redisinsight:
    image: redis/redisinsight:latest
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/data
    networks:
      - graphrag-network

networks:
  graphrag-network:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  qdrant_data:
  redis_data:
  redisinsight_data: